// this file contains a test harness that was auto-generated by fastify-openapi-glue
// running the tests directly after generation will probably fail as the parameters
// need to be manually added.

import { MessageType, EventTypes } from '@libp2p/kad-dht'
import { defaultLogger } from '@libp2p/logger'
import { createEd25519PeerId } from '@libp2p/peer-id-factory'
import { expect } from 'aegir/chai'
import delay from 'delay'
import { stubInterface, type StubbedInstance } from 'sinon-ts'
import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'
import { toString as uint8ArrayToString } from 'uint8arrays/to-string'
import { createServer } from '../src/server.js'
import { toNanoSeconds } from '../src/utils.js'
import type { ContentRouting, Libp2p } from '@libp2p/interface'
import type { KadDHT } from '@libp2p/kad-dht'

describe('http api', () => {
  let libp2p: StubbedInstance<Libp2p<{ dht: KadDHT }>>
  let contentRouting: StubbedInstance<ContentRouting>
  let dht: StubbedInstance<KadDHT>

  beforeEach(() => {
    contentRouting = stubInterface<ContentRouting>()
    dht = stubInterface<KadDHT>({
      // @ts-expect-error not part of interface
      routingTable: {
        size: 5
      }
    })
    libp2p = stubInterface<Libp2p<{ dht: KadDHT }>>({
      logger: defaultLogger(),
      contentRouting,
      services: {
        dht
      }
    })
  })

  //
  // Operation: postProvide
  // URL: /provide
  // summary: Publishes a provider record for the given content.
  // req.headers
  //   type: object
  //   properties:
  //     x-scheduler-id:
  //       type: string
  //       description: >-
  //         An identifier of the scheduler that's doing the request. This value is
  //         used for prometheus metrics.
  //
  // req.body
  //   required:
  //     - Content
  //   properties:
  //     Content:
  //       type: string
  //       format: base64
  //       description: >
  //         Binary data the server should use to generate a CID and publish a provider
  //         record for.
  //
  //         The Go implementation generates 1024 bytes of random data and puts into
  //         this JSON field.
  //     Target:
  //       type: string
  //       enum:
  //         - DHT
  //         - IPNI
  //       default: DHT
  //       description: >
  //         Specifies the provide target type. If set to DHT (default when property !=
  //         IPNI) the server
  //
  //         will write provider records to the DHT. If set to IPNI, the server
  //         announces an advertisement
  //
  //         to an InterPlanetary Network Indexer. To which specifically is part of the
  //         servers configuration
  //
  //         and the client must know how the server is configured to know the specific
  //         IPNI (e.g, whether
  //
  //         it's cid.contact or another one)
  //
  // valid responses
  //   '200':
  //     description: >
  //       The result of the provider record publication. Any error that might have
  //       happened during that
  //
  //       process should be passed to the `Error` field. For the sake of the
  //       measurement we still consider
  //
  //       an erroneous publication a valid data point. Hence, a `200` status code.
  //     content:
  //       application/json:
  //         schema:
  //           required:
  //             - CID
  //             - Duration
  //             - Error
  //             - RoutingTableSize
  //           properties:
  //             CID:
  //               type: string
  //               format: CID
  //               example: bafybeihdwdcefgh4dqkjv67uzcmw7ojee6xedzdetojuzjevtenxquvyku
  //             Duration:
  //               type: integer
  //               description: >-
  //                 The time it took to write all provider records in nanoseconds
  //                 (default Go formatting of `time.Duration`). E.g., `1000000000` for
  //                 1s.
  //               example: 1000000000
  //             Error:
  //               type: string
  //               description: >-
  //                 Just any text that indicates the error reason. If no error
  //                 happened, pass an empty string.
  //             RoutingTableSize:
  //               type: integer
  //               description: >-
  //                 The number of peers in the routing table. Either right before or
  //                 right after the publication. Doesn't really matter.
  //               example: 202
  //   '400':
  //     description: E.g., the given JSON was malformed.
  //
  it('postProvide', async () => {
    const fastify = await createServer(libp2p)

    dht.provide.returns(async function * () {
      yield {
        from: await createEd25519PeerId(),
        name: 'PEER_RESPONSE',
        type: EventTypes.PEER_RESPONSE,
        messageName: 'ADD_PROVIDER',
        messageType: MessageType.ADD_PROVIDER,
        closer: [],
        providers: []
      }
    }())

    const res = await fastify.inject({
      method: 'POST',
      url: '/provide',
      payload: {
        Content: uint8ArrayToString(uint8ArrayFromString('hello world'), 'base64')
      },
      headers: {
        'content-type': 'application/json'
      }
    })

    expect(res.statusCode).to.equal(200)

    const body = JSON.parse(res.body)
    expect(body).to.not.have.property('Error')
    expect(body).to.have.property('Duration').that.is.a('number')
    expect(body).to.have.property('RoutingTableSize').that.is.a('number')
  })

  it('postProvide should error if no provider records are published', async () => {
    const fastify = await createServer(libp2p)

    // no events emitted
    dht.findProviders.resolves([])

    const res = await fastify.inject({
      method: 'POST',
      url: '/provide',
      payload: {
        Content: uint8ArrayToString(uint8ArrayFromString('hello world'), 'base64')
      },
      headers: {
        'content-type': 'application/json'
      }
    })

    expect(res.statusCode).to.equal(200)

    const body = JSON.parse(res.body)
    expect(body).to.have.property('Error', 'Did not publish to any providers')
  })

  // Operation: postRetrieveByCid
  // URL: /retrieve/:cid
  // summary:  Looks up provider records for the given CID.
  // req.headers
  //   type: object
  //   properties:
  //     x-scheduler-id:
  //       type: string
  //       description: >-
  //         An identifier of the scheduler that's doing the request. This value is
  //         used for prometheus metrics.
  //
  // req.params
  //   type: object
  //   properties:
  //     cid:
  //       type: string
  //       description: CID to look up
  //   required:
  //     - cid
  //
  // req.body
  //   type: object
  //
  // valid responses
  //   '200':
  //     description: >
  //       The result of the provider record look up. Any error that might have
  //       happened during that
  //
  //       process should be passed to the `Error` field. For the sake of the
  //       measurement we still consider
  //
  //       an erroneous retrieval a valid data point. Hence, a `200` status code.
  //     content:
  //       application/json:
  //         schema:
  //           required:
  //             - CID
  //             - Duration
  //             - Error
  //             - RoutingTableSize
  //           properties:
  //             CID:
  //               type: string
  //               format: CID
  //               example: bafybeihdwdcefgh4dqkjv67uzcmw7ojee6xedzdetojuzjevtenxquvyku
  //             Duration:
  //               type: integer
  //               description: >-
  //                 The time it took to **find the first** provider records in
  //                 nanoseconds (default Go formatting of `time.Duration`). E.g.,
  //                 `1000000000` for 1s.
  //               example: 1000000000
  //             Error:
  //               type: string
  //               description: >
  //                 Just any text that indicates the error reason. If no error
  //                 happened, pass an empty string.
  //
  //                 If the lookup algorithm couldn't find a provider record but didn't
  //                 really encounter
  //
  //                 an error, this field should be mapped to the value `not found`.
  //             RoutingTableSize:
  //               type: integer
  //               description: >-
  //                 The number of peers in the routing table. Either right before or
  //                 right after the publication. Doesn't really matter.
  //               example: 202
  //   '400':
  //     description: E.g., the JSON is malformed or we couldn't parse the given CID.
  //
  it('postRetrieveByCid', async () => {
    const fastify = await createServer(libp2p)

    dht.findProviders.returns(async function * () {
      yield {
        from: await createEd25519PeerId(),
        name: 'PEER_RESPONSE',
        type: EventTypes.PEER_RESPONSE,
        messageName: 'GET_PROVIDERS',
        messageType: MessageType.ADD_PROVIDER,
        closer: [],
        providers: [{
          id: await createEd25519PeerId(),
          multiaddrs: []
        }]
      }
    }())

    const res = await fastify.inject({
      method: 'POST',
      url: '/retrieve/bafybeihdwdcefgh4dqkjv67uzcmw7ojee6xedzdetojuzjevtenxquvyku',
      payload: {}
    })

    expect(res.statusCode).to.equal(200)

    const body = JSON.parse(res.body)
    expect(body).to.not.have.property('Error')
    expect(body).to.have.property('Duration').that.is.a('number')
    expect(body).to.have.property('RoutingTableSize').that.is.a('number')
  })

  it('postRetrieveByCid should only read the first provider', async () => {
    const fastify = await createServer(libp2p)
    const longDelay = 50000

    dht.findProviders.returns(async function * () {
      yield {
        from: await createEd25519PeerId(),
        name: 'PEER_RESPONSE',
        type: EventTypes.PEER_RESPONSE,
        messageName: 'GET_PROVIDERS',
        messageType: MessageType.ADD_PROVIDER,
        closer: [],
        providers: [{
          id: await createEd25519PeerId(),
          multiaddrs: []
        }]
      }

      await delay(longDelay)

      yield {
        from: await createEd25519PeerId(),
        name: 'PEER_RESPONSE',
        type: EventTypes.PEER_RESPONSE,
        messageName: 'GET_PROVIDERS',
        messageType: MessageType.ADD_PROVIDER,
        closer: [],
        providers: [{
          id: await createEd25519PeerId(),
          multiaddrs: []
        }]
      }
    }())

    const res = await fastify.inject({
      method: 'POST',
      url: '/retrieve/bafybeihdwdcefgh4dqkjv67uzcmw7ojee6xedzdetojuzjevtenxquvyku',
      payload: {}
    })

    expect(res.statusCode).to.equal(200)

    const body = JSON.parse(res.body)
    expect(body).to.not.have.property('Error')
    expect(body).to.have.property('Duration').that.is.a('number').that.is.lessThan(toNanoSeconds(longDelay))
    expect(body).to.have.property('RoutingTableSize').that.is.a('number')
  })

  it('postRetrieveByCid should error if no provider records are found', async () => {
    const fastify = await createServer(libp2p)

    dht.findProviders.returns(async function * () {

    }())

    const res = await fastify.inject({
      method: 'POST',
      url: '/retrieve/bafybeihdwdcefgh4dqkjv67uzcmw7ojee6xedzdetojuzjevtenxquvyku',
      payload: {}
    })

    const body = JSON.parse(res.body)
    expect(body).to.have.property('Error', 'Did not find any providers')
  })

  // Operation: getReadiness
  // URL: /readiness
  // summary: Indicates readiness for accepting publication or retrieval requests.
  // valid responses
  //   '200':
  //     description: The server is ready to accept publication or retrieval requests.
  //
  it('getReadiness', async () => {
    const fastify = await createServer(libp2p)

    const res = await fastify.inject({
      method: 'GET',
      url: '/readiness'
    })

    expect(res.statusCode).to.equal(200)
  })
})
